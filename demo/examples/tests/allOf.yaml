openapi: 3.1.0
info:
  title: AllOf Variations API
  description: Demonstrates various allOf schema combinations.
  version: 1.0.0
tags:
  - name: allOf
    description: allOf tests
paths:
  /multiple-allof-nested:
    get:
      tags:
        - allOf
      summary: Multiple allOf with Nested Properties
      description: |
        Schema:
        ```yaml
        allOf:
          - type: object
            properties:
              outerProp1:
                type: object
                properties:
                  innerProp1:
                    type: string
          - type: object
            properties:
              outerProp2:
                type: object
                properties:
                  innerProp2:
                    type: number
        ```
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      outerProp1:
                        type: object
                        properties:
                          innerProp1:
                            type: string
                  - type: object
                    properties:
                      outerProp2:
                        type: object
                        properties:
                          innerProp2:
                            type: number

  /allof-shared-required:
    get:
      tags:
        - allOf
      summary: allOf with Shared Required Properties
      description: |
        Schema:
        ```yaml
        allOf:
          - type: object
            properties:
              sharedProp:
                type: string
            required: [sharedProp]
          - type: object
            properties:
              anotherProp:
                type: number
            required: [anotherProp]
        ```
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      sharedProp:
                        type: string
                    required: [sharedProp]
                  - type: object
                    properties:
                      anotherProp:
                        type: number
                    required: [anotherProp]

  /allof-deep-merging:
    get:
      tags:
        - allOf
      summary: allOf with Deep Merging
      description: |
        Schema:
        ```yaml
        allOf:
          - type: object
            properties:
              deepProp:
                type: object
                properties:
                  innerProp1:
                    type: string
          - type: object
            properties:
              deepProp:
                type: object
                properties:
                  innerProp2:
                    type: number
        ```
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      deepProp:
                        type: object
                        properties:
                          innerProp1:
                            type: string
                  - type: object
                    properties:
                      deepProp:
                        type: object
                        properties:
                          innerProp2:
                            type: number

  /allof-same-level-properties:
    get:
      tags:
        - allOf
      summary: allOf with Same-Level Properties
      description: |
        Schema:
        ```yaml
        allOf:
          - type: object
            properties:
              allOfProp1:
                type: string
              allOfProp2:
                type: string
        properties:
          parentProp1:
            type: string
          parentProp2:
            type: string
        ```
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      allOfProp1:
                        type: string
                      allOfProp2:
                        type: string
                properties:
                  parentProp1:
                    type: string
                  parentProp2:
                    type: string

  /allof-array-items:
    get:
      tags:
        - allOf
      summary: allOf with Array Items
      description: |
        A list of books demonstrating allOf with items as children.

        Schema:
        ```yaml
        type: array
        items:
          $ref: '#/components/schemas/Book'
        ```

        Schema Components:
        ```yaml
        BookBase:
          type: object
          required:
            - id
            - title
            - author
          properties:
            id:
              type: integer
              format: int64
              description: Unique identifier for the book
            title:
              type: string
              description: The title of the book
            author:
              type: string
              description: The author of the book

        AdditionalBookInfo:
          type: object
          properties:
            publishedDate:
              type: string
              format: date
              description: The date the book was published
            genre:
              type: string
              description: The genre of the book
            tags:
              type: array
              items:
                type: string
              description: Tags associated with the book

        Book:
          allOf:
            - $ref: '#/components/schemas/BookBase'
            - $ref: '#/components/schemas/AdditionalBookInfo'
        ```
      responses:
        "200":
          description: A list of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"

  /allof-with-properties-in-array-item:
    get:
      tags:
        - allOf
      summary: allOf with Properties in Array Item
      description: |
        A list of books demonstrating allOf with properties in array item.

        Schema:
        ```yaml
        type: array
        items:
          $ref: '#/components/schemas/Book'
        ```

        Schema Components:
        ```yaml
        BookBase:
          type: object
          required:
            - id
            - title
            - author
          properties:
            id:
              type: integer
              format: int64
              description: Unique identifier for the book
            title:
              type: string
              description: The title of the book
            author:
              type: string
              description: The author of the book

        AdditionalBookInfo:
          type: object
          properties:
            publishedDate:
              type: string
              format: date
              description: The date the book was published
            genre:
              type: string
              description: The genre of the book
            tags:
              type: array
              items:
                type: string
              description: Tags associated with the book

        CategorizedBook:
          allOf:
            - $ref: '#/components/schemas/BookBase'
            - $ref: '#/components/schemas/AdditionalBookInfo'
          properties:
            category:
              type: string
              description: The category of the book
        ```
      responses:
        "200":
          description: A list of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CategorizedBook"

  /allof-nested:
    get:
      tags:
        - allOf
      summary: allOf with Nested allOf
      description: |
        An example demonstrating nested allOf within allOf.

        Schema:
        ```yaml
        allOf:
          - type: object
            properties:
              outerProp:
                type: object
                allOf:
                  - type: object
                    properties:
                      innerProp1:
                        type: string
                  - type: object
                    properties:
                      innerProp2:
                        type: number
          - type: object
            properties:
              otherOuterProp:
                type: string
        ```
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      outerProp:
                        type: object
                        allOf:
                          - type: object
                            properties:
                              innerProp1:
                                type: string
                          - type: object
                            properties:
                              innerProp2:
                                type: number
                  - type: object
                    properties:
                      otherOuterProp:
                        type: string

  /allof-parent-required:
    get:
      tags:
        - allOf
      summary: allOf inherits parent required
      description: |
        Parent object marks the "pet" property as required while its schema is composed via allOf.

        Schema:
        ```yaml
        type: object
        properties:
          pet:
            allOf:
              - type: object
                properties:
                  name:
                    type: string
              - type: object
                properties:
                  age:
                    type: integer
        required: [pet]
        ```
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  pet:
                    allOf:
                      - type: object
                        properties:
                          name:
                            type: string
                      - type: object
                        properties:
                          age:
                            type: integer
                required:
                  - pet

components:
  schemas:
    # Your existing schemas are integrated here.
    ExistingSchema1:
      type: object
      properties: ...

    ExistingSchema2:
      type: object
      properties: ...

    # New schemas for Books demonstration
    BookBase:
      type: object
      required:
        - id
        - title
        - author
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the book
          example: 1234567890
        title:
          type: string
          description: The title of the book
          example: "The Great Gatsby"
        author:
          type: string
          description: The author of the book
          example: "F. Scott Fitzgerald"

    AdditionalBookInfo:
      type: object
      properties:
        publishedDate:
          type: string
          format: date
          description: The date the book was published
          example: "2021-01-01"
        genre:
          type: string
          description: The genre of the book
          example: "Fiction"
        tags:
          type: array
          items:
            type: string
          description: Tags associated with the book
          example: ["Fiction", "Mystery"]

    Book:
      allOf:
        - $ref: "#/components/schemas/BookBase"
        - $ref: "#/components/schemas/AdditionalBookInfo"

    CategorizedBook:
      allOf:
        - $ref: "#/components/schemas/BookBase"
        - $ref: "#/components/schemas/AdditionalBookInfo"
      properties:
        category:
          type: string
          description: The category of the book
          example: "Fiction"
